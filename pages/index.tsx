import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import { useTranslation } from 'next-i18next'
import { useRouter } from 'next/router'
import { useHostedSession } from '../src/hooks/useHostedSession'
import {
  LoadingPage,
  ErrorPage,
  CloseHostedSessionModal,
  ActivitiesContainer,
} from '../src/components'
import { NetworkErrorPage } from '../src/components/NetworkErrorPage'
import { InvalidSessionPage } from '../src/components/InvalidSessionPage'
import { ThemeProvider, HostedPageLayout } from '@awell-health/ui-library'
import { ToastContainer } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
import awell_logo from '../src/assets/logo.svg'
import {
  ReactElement,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from 'react'
import { HostedSessionStatus } from '../src/types/generated/types-orchestration'
import { defaultTo, isNil } from 'lodash'
import { useSessionStorage } from '../src/hooks/useSessionStorage'
import Head from 'next/head'
import { addSentryBreadcrumb } from '../src/services/ErrorReporter'
import { BreadcrumbCategory } from '../src/services/ErrorReporter/addSentryBreadcrumb'
import { NextPageWithLayout } from './_app'
import { HostedSessionLayout } from '../src/layouts'
import { SuccessPage } from '../src/components/SuccessPage'
import { SessionExpiredPage } from '../src/components/SessionExpiredPage'
import { AWELL_BRAND_COLOR } from '../src/config'
import { useLogging } from '../src/hooks/useLogging'
import { LogEvent } from '../src/hooks/useLogging/types'
import Image from 'next/image'
import useLocalStorage from 'use-local-storage'
import { validateLocale } from '../src/utils'
import { useNetworkError } from '../src/contexts/NetworkErrorContext'

// Handles Session URLs generated by Start Hosted Pathway/Activities Session mutation
// i.e. https://goto.awell.health/en?sessionId=e-Dmjxm3E5AW
const Home: NextPageWithLayout = () => {
  const { t } = useTranslation()
  const {
    loading: sessionLoading,
    session,
    branding,
    theme,
    error,
    refetch,
  } = useHostedSession()
  const { removeItem: removeAccessToken } = useSessionStorage('accessToken', '')
  const [logoOverride, setLogoOverride] = useLocalStorage(
    'awell-hp-logo-override',
    ''
  )
  const router = useRouter()
  const { infoLog } = useLogging()
  const {
    hasNetworkError,
    networkErrorCount,
    setNetworkError,
    resetNetworkErrorCount,
  } = useNetworkError()

  const [isCloseHostedSessionModalOpen, setIsCloseHostedSessionModalOpen] =
    useState(false)
  const [showInvalidSession, setShowInvalidSession] = useState(false)

  const handleNetworkErrorRetry = useCallback(async () => {
    try {
      const res = await refetch?.()

      const refetchedSession = res?.data?.hostedSession?.session
      if (refetchedSession) {
        resetNetworkErrorCount()
        setNetworkError(false)
        setShowInvalidSession(false)

        addSentryBreadcrumb({
          category: BreadcrumbCategory.GENERIC,
          data: {
            message: 'Network error retry successful',
            sessionId: router.query.sessionId,
          },
        })
        return
      }

      // No session and no unauthorized â†’ treat as invalid
      setShowInvalidSession(true)
      setNetworkError(false)
    } catch (err) {
      setNetworkError(true)

      addSentryBreadcrumb({
        category: BreadcrumbCategory.GENERIC,
        data: {
          message: 'Network error retry failed',
          sessionId: router.query.sessionId,
          error: err,
        },
      })
    }
  }, [
    refetch,
    resetNetworkErrorCount,
    setNetworkError,
    setShowInvalidSession,
    router.query.sessionId,
  ])

  const { redirectAfterSession, shouldRedirect } = useRedirectAfterSession({
    removeAccessToken,
    setLogoOverride,
    router,
    session,
  })

  const onOpenCloseHostedSessionModal = () => {
    setIsCloseHostedSessionModalOpen(true)
  }

  const onCloseHostedSessionModal = () => {
    setIsCloseHostedSessionModalOpen(false)
  }

  const onCloseHostedSession = () => {
    addSentryBreadcrumb({
      category: BreadcrumbCategory.SESSION_CANCEL,
      data: session,
    })
    router.push(session?.cancel_url ?? 'https://awell.health')
  }

  const hideCloseButton =
    (session?.status !== HostedSessionStatus.Active && !shouldRedirect) ||
    !theme?.layout?.showCloseButton

  useEffect(() => {
    if (isNil(session?.status)) {
      addSentryBreadcrumb({
        category: BreadcrumbCategory.GENERIC,
        data: { session, message: 'Session status is null' },
      })
      return
    }
    if (typeof window === 'undefined') {
      addSentryBreadcrumb({
        category: BreadcrumbCategory.GENERIC,
        data: { session, message: 'Window is undefined' },
      })
      return
    }

    switch (session?.status) {
      case HostedSessionStatus.Completed: {
        infoLog(
          `Hosted session is completed`,
          { session },
          LogEvent.SESSION_COMPLETED
        )
        addSentryBreadcrumb({
          category: BreadcrumbCategory.SESSION_COMPLETE,
          data: { session },
        })
        if (shouldRedirect) {
          redirectAfterSession(session.success_url as string)
        }
        return
      }
      case HostedSessionStatus.Expired: {
        infoLog(
          `Hosted session is expired`,
          { session },
          LogEvent.SESSION_EXPIRED
        )
        addSentryBreadcrumb({
          category: BreadcrumbCategory.SESSION_EXPIRE,
          data: { session },
        })
        if (shouldRedirect) {
          redirectAfterSession(session.cancel_url as string)
        }
        return
      }
      default: {
        infoLog(
          `Hosted session is ongoing`,
          { session },
          LogEvent.SESSION_ONGOING
        )
        return
      }
    }
  }, [session, shouldRedirect, infoLog, redirectAfterSession])

  // content now handled by SessionRouter component
  const logo = useLogo(theme, branding, logoOverride)

  // Show network error page if retry link failed after 3 attempts
  if (hasNetworkError && networkErrorCount >= 3) {
    const sessionId = router.query.sessionId as string | undefined
    return (
      <NetworkErrorGate
        show={true}
        branding={branding}
        logo={logo}
        onCloseHostedPage={onOpenCloseHostedSessionModal}
        onRetry={handleNetworkErrorRetry}
        sessionId={sessionId}
      />
    )
  }

  // Show invalid session page after successful retry but no valid session
  if (showInvalidSession) {
    const sessionId = router.query.sessionId as string | undefined
    const errorType = error === 'UNAUTHORIZED' ? 'unauthorized' : 'not_found'
    return (
      <InvalidSessionGate
        show={true}
        branding={branding}
        logo={logo}
        onCloseHostedPage={onOpenCloseHostedSessionModal}
        sessionId={sessionId}
        errorType={errorType}
      />
    )
  }

  if (sessionLoading) {
    return <LoadingPage showLogoBox={true} />
  }

  return (
    <>
      <Head>
        <title>{defaultTo(branding?.hosted_page_title, t('seo.title'))}</title>
        <meta property="og:title" content={t('seo.title')} key="title" />
        <meta name="description" content={t('seo.description')} />
      </Head>
      <ThemeProvider accentColor={branding?.accent_color || AWELL_BRAND_COLOR}>
        <HostedPageLayout
          logo={logo}
          onCloseHostedPage={onOpenCloseHostedSessionModal}
          hideCloseButton={hideCloseButton}
        >
          <SessionRouter session={session} shouldRedirect={shouldRedirect} />
          {error && (
            <ErrorPage
              title={
                error === 'UNAUTHORIZED'
                  ? t('session.session_completed_or_expired')
                  : t('session.loading_error')
              }
              onRetry={refetch}
            />
          )}
          <ToastContainer
            position="bottom-right"
            newestOnTop
            closeOnClick
            pauseOnFocusLoss
            autoClose={12000}
            hideProgressBar
            draggable
          />
          <CloseHostedSessionModal
            isModalOpen={isCloseHostedSessionModalOpen}
            onCloseHostedSession={onCloseHostedSession}
            onCloseModal={onCloseHostedSessionModal}
          />
        </HostedPageLayout>
      </ThemeProvider>
    </>
  )
}

Home.getLayout = function getLayout(page: ReactElement) {
  return <HostedSessionLayout>{page}</HostedSessionLayout>
}

export default Home

export async function getStaticProps({ locale }: { locale: string }) {
  // Validate and normalize the locale, falling back to 'en' if misconfigured
  const validatedLocale = validateLocale(locale)

  return {
    props: {
      ...(await serverSideTranslations(validatedLocale, ['common'])),
    },
  }
}

// Redirect and breadcrumb timing constants
const REDIRECT_DELAY_MS = 2000
const SLOW_REDIRECT_10S_MS = 10000
const SLOW_REDIRECT_15S_MS = 15001

// Returns a stable redirect function with timeout cleanup and a derived shouldRedirect flag
function useRedirectAfterSession(params: {
  removeAccessToken: () => void
  setLogoOverride: any
  router: ReturnType<typeof useRouter>
  session: any
}) {
  const { removeAccessToken, setLogoOverride, router, session } = params
  const timeoutIdsRef = useRef<number[]>([])

  const shouldRedirect = useMemo(() => {
    const hasSuccess =
      session?.status === HostedSessionStatus.Completed &&
      !isNil(session?.success_url)
    const hasCancel =
      session?.status === HostedSessionStatus.Expired &&
      !isNil(session?.cancel_url)
    return hasSuccess || hasCancel
  }, [session])

  const clearAllTimeouts = useCallback(() => {
    timeoutIdsRef.current.forEach((id) => clearTimeout(id))
    timeoutIdsRef.current = []
  }, [])

  const redirectAfterSession = useCallback(
    (url: string) => {
      clearAllTimeouts()

      const redirectId = window.setTimeout(() => {
        removeAccessToken()
        setLogoOverride('')
        router.push(url)
      }, REDIRECT_DELAY_MS)

      const slow10sId = window.setTimeout(() => {
        addSentryBreadcrumb({
          category: BreadcrumbCategory.SLOW_REDIRECT,
          data: { session, message: 'Redirect took at least 10 seconds' },
        })
      }, SLOW_REDIRECT_10S_MS)

      const slow15sId = window.setTimeout(() => {
        addSentryBreadcrumb({
          category: BreadcrumbCategory.SLOW_REDIRECT,
          data: { session, message: 'Redirect took at least 15 seconds' },
        })
      }, SLOW_REDIRECT_15S_MS)

      timeoutIdsRef.current.push(redirectId, slow10sId, slow15sId)
    },
    [clearAllTimeouts, removeAccessToken, setLogoOverride, router, session]
  )

  useEffect(() => {
    return () => {
      clearAllTimeouts()
    }
  }, [clearAllTimeouts])

  return { redirectAfterSession, shouldRedirect }
}

// Returns a consistent logo value supported by HostedPageLayout: string URL or JSX element
function useLogo(
  theme: any,
  branding: any,
  logoOverride: string
): string | JSX.Element | undefined {
  return useMemo(() => {
    if (!theme?.layout?.showLogo) return undefined

    const AwellLogo = <Image src={awell_logo} alt="Awell Logo" />

    if (logoOverride && logoOverride !== '') {
      return logoOverride
    }

    if (branding?.logo_url) {
      return branding.logo_url as string
    }

    return AwellLogo
  }, [theme, branding, logoOverride])
}

// Switches on session status to render the proper view
function SessionRouter(props: { session: any; shouldRedirect: boolean }) {
  const { session, shouldRedirect } = props
  if (!session) return null

  switch (session.status) {
    case HostedSessionStatus.Active:
      return <ActivitiesContainer />
    case HostedSessionStatus.Completed:
      return <SuccessPage redirect={shouldRedirect} />
    case HostedSessionStatus.Expired:
      return <SessionExpiredPage redirect={shouldRedirect} />
    default:
      return null
  }
}

function NetworkErrorGate(props: {
  show: boolean
  branding: any
  logo: string | JSX.Element | undefined
  onCloseHostedPage: () => void
  onRetry: () => Promise<void>
  sessionId?: string
}) {
  const { show, branding, logo, onCloseHostedPage, onRetry, sessionId } = props
  if (!show) return null
  return (
    <ThemeProvider accentColor={branding?.accent_color || AWELL_BRAND_COLOR}>
      <HostedPageLayout
        logo={logo}
        onCloseHostedPage={onCloseHostedPage}
        hideCloseButton={true}
      >
        <NetworkErrorPage onRetry={onRetry} sessionId={sessionId} />
      </HostedPageLayout>
    </ThemeProvider>
  )
}

function InvalidSessionGate(props: {
  show: boolean
  branding: any
  logo: string | JSX.Element | undefined
  onCloseHostedPage: () => void
  sessionId?: string
  errorType: 'unauthorized' | 'not_found'
}) {
  const { show, branding, logo, onCloseHostedPage, sessionId, errorType } =
    props
  if (!show) return null
  return (
    <ThemeProvider accentColor={branding?.accent_color || AWELL_BRAND_COLOR}>
      <HostedPageLayout
        logo={logo}
        onCloseHostedPage={onCloseHostedPage}
        hideCloseButton={true}
      >
        <InvalidSessionPage sessionId={sessionId} errorType={errorType} />
      </HostedPageLayout>
    </ThemeProvider>
  )
}
